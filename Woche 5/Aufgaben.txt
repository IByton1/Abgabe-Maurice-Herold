1.  Ein Heap ist eine Datenstruktur, die als Baum organisiert ist. 
    In der Regel wird sie in Arrays gespeichert.
    Sie kann reguliert und sortiert werden, und das kleinste oder größte Element steht in der Wurzel.

2.  Wir verwenden einen Min-Heap der Größe k.
    Nun lassen wir den Datenstrom sequenziell durchlaufen und berechnen für jedes neue Wort die Länge.  
    Wenn die Größe des Min-Heap kleiner als k ist, fügen wir das Wort einfach hinzu.
    Andernfalls vergleichen wir das kleinste Wort im Min-Heap, und wenn es kleiner als das aktuelle Wort ist, 
    ersetzen wir es mit dem aktuellen. Am Ende sind im Min-Heap die k längsten Wörter.

3.  1.  Jede Eingabedatei wird in mehrere kleine Teile geteilt, die in den RAM passen. 
        Nun sortieren wir jeden dieser Teile und schreiben sie in separate Dateien auf der Festplatte.
    3.  Nun fügen wir die sortierten Teile in eine separate Datei auf der Festplatte zusammen.
    3.  Schritt 2 wird solange wiederholt, bis es nur noch eine Datei gibt. 
        Beim Zusammenführen der Dateien lesen wir jedes Mal einen Block von jeder Datei in den Arbeitsspeicher, 
        sortieren die Elemente in diesem Block und schreiben das Ergebnis in eine Ausgabedatei auf der Festplatte. 
        Ist ein Block leer, so lesen wir einen neuen aus der Datei ein, bis alle Elemente sortiert sind.

4.  Ein Sortier-Netzwerk ist ein paralleler Sortieralgorithmus, 
    der aus einer Folge von Vergleichen zwischen Elementen einer Eingabeliste besteht. 
    Es gibt verschiedene Schichten, die aus Gruppen von Vergleichen bestehen. 
    Sie werden meist für Anwendungen eingesetzt, bei denen die Parallelität von Vorteil ist.

5.  Set-Operationen können dadurch beschleunigt werden, 
    dass sortierte Mengen schneller durchsucht werden können und Redundanzen leicht erkannt werden können. 
    Sortierte Listen können auch einfacher zusammengeführt werden, was das Berechnen von Vereinigung, 
    Schnitt oder Differenz vereinfacht.

6.  Eine MPHF ermöglicht schnelle Suchoperationen auf einer statischen Menge von Schlüsseln, 
    ohne dass eine Datenstruktur wie eine Hashtabelle oder ein Suchbaum benötigt wird. 
    Man benötigt keinen zusätzlichen Speicher und hat eine konstante Zeitkomplexität.
     



