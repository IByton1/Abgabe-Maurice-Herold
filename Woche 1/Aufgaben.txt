1.


2.  O(1): Zugriff auf ein Element in einem Array mit einem Index.
    O(log n): Binäre Suche in einem sortierten Array.
    O(n): Lineare Suche in einem Array.
    O(n log n): Merge-Sort.
    O(n^2): Bubble-Sort.

3.  1. Das Problem verstehen: Sicher sein, dass man das Problem verstanden hat. Wichtige Sachen notieren und wenn nötig nachfragen.
    2. Ein Plan entwickeln: Zuerst überlegen wie man an das Problem ran geht und welcher Ansatz der beste ist.
    3. Den Code implementieren: Den Code Schritt für Schritt für das Problem schreiben, um sicher zu sein, dass die Zwischenergebnisse richtig sind.
    4. Den Code testen: Teste, ob dein Code richtig funktioniert und ändere Dinge, die nicht gehen.
    5. Optimieren: Optimiere deine Lösung soweit es geht (unnötige Schleifen entfernen, bessere Algorithmen).
    6. Dokumentiere deine Lösung mit Kommentaren im Code.

4.  1. Durchlaufe die Liste der Aktienpreise und behalte den bisherigen Minimalpreis und den bisherigen maximalen Gewinn im Auge.
    2. Aktualisiere bei jedem Schritt den bisherigen Minimalpreis auf den aktuellen Preis, wenn dieser niedriger als der bisherige Minimalpreis ist.
    3. Aktualisiere ebenfalls bei jedem Schritt den bisherigen maximalen Gewinn auf die Differenz zwischen dem aktuellen Preis und dem aktuellen Minimalpreis, wenn diese höher als der bisherige maximale Gewinn ist.
    4. Gib den bisherigen maximalen Gewinn als Ergebnis zurück.

    pseudocode:

    def maximum_profit(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit

5.  1. Überprüfe, ob beide Strings dieselbe Länge haben.
    2. Sortiere beide Strings.
    3. Vergleiche die sortierten Strings. Wenn sie gleich sind, handelt es sich um Permutationen, sonst nicht.

    function isPermutation(a, b):
    if len(a) != len(b):
        return false
    a_sorted = sort(a)
    b_sorted = sort(b)
    return a_sorted == b_sorted